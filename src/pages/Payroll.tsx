import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, Download, Calculator, Sparkles, DollarSign } from "lucide-react";

interface FormData {
  employeeName: string;
  basicSalary: string;
  allowances: string;
  deductions: string;
  bonuses: string;
}

interface Trail {
  id: number;
  x: number;
  y: number;
  size: number;
  delay: number;
}

const Payroll = () => {
  const navigate = useNavigate();
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [cursorTrail, setCursorTrail] = useState<Trail[]>([]);
  const [isHovering, setIsHovering] = useState(false);

  // State to store form input values
  const [formData, setFormData] = useState<FormData>({
    employeeName: "",
    basicSalary: "",
    allowances: "",
    deductions: "",
    bonuses: "",
  });

  // State to store calculated net salary
  const [netSalary, setNetSalary] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);

  // Mouse tracking with enhanced trail effect
  useEffect(() => {
    let trailId = 0;
    
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
      
      // Create multiple trail particles
      const newTrails: Trail[] = [];
      for (let i = 0; i < 3; i++) {
        const trail: Trail = {
          id: trailId++,
          x: e.clientX + (Math.random() - 0.5) * 20,
          y: e.clientY + (Math.random() - 0.5) * 20,
          size: Math.random() * 8 + 4,
          delay: i * 50,
        };
        newTrails.push(trail);
      }
      
      setCursorTrail((prev) => [...prev, ...newTrails].slice(-30));
      
      // Remove trails after animation
      setTimeout(() => {
        setCursorTrail((prev) => prev.filter((t) => !newTrails.find(nt => nt.id === t.id)));
      }, 800);
    };
    
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  // Function to update form inputs
  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  // Function to calculate net salary and save payroll data
  const calculateSalary = async () => {
    const basic = parseFloat(formData.basicSalary) || 0;
    const allow = parseFloat(formData.allowances) || 0;
    const deduc = parseFloat(formData.deductions) || 0;
    const bonus = parseFloat(formData.bonuses) || 0;

    const net = basic + allow + bonus - deduc;
    setNetSalary(net);
    setShowResult(true);

    const payrollData = {
      employeeName: formData.employeeName,
      basicSalary: basic,
      allowances: allow,
      deductions: deduc,
      bonuses: bonus,
      netSalary: net,
    };

    try {
      const res = await fetch("http://localhost:5000/api/payroll/add", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payrollData),
      });

      const data = await res.json();

      if (!res.ok) {
        console.error(data.message || "Something went wrong.");
      }
    } catch (error) {
      console.error("Error saving payroll:", error);
    }
  };

  const downloadSlip = () => {
    if (netSalary === null) return;
    
    // Create salary slip content
    const slipContent = `
╔════════════════════════════════════════════╗
║        SALARY SLIP - ${new Date().toLocaleDateString()}        ║
╚════════════════════════════════════════════╝

Employee Name: ${formData.employeeName || "N/A"}
-------------------------------------------

EARNINGS:
  Basic Salary:    ₹${parseFloat(formData.basicSalary || "0").toFixed(2)}
  Allowances:      ₹${parseFloat(formData.allowances || "0").toFixed(2)}
  Bonuses:         ₹${parseFloat(formData.bonuses || "0").toFixed(2)}

DEDUCTIONS:
  Total Deductions: ₹${parseFloat(formData.deductions || "0").toFixed(2)}

-------------------------------------------
NET SALARY:        ₹${netSalary.toFixed(2)}
-------------------------------------------

Generated by Financial Automation Platform
Powered by Advanced Payroll Engine ✨
    `.trim();

    // Create a blob and download
    const blob = new Blob([slipContent], { type: "text/plain" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `salary_slip_${formData.employeeName.replace(/\s+/g, "_")}_${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  const handleBackToDashboard = () => {
    navigate("/dashboard");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-950 to-indigo-950 text-white overflow-hidden relative">
      {/* Enhanced Custom Cursor - Always on top with higher z-index */}
      <div 
        className="fixed pointer-events-none z-[99999]"
        style={{
          left: mousePosition.x,
          top: mousePosition.y,
          transform: 'translate(-50%, -50%)',
        }}
      >
        {/* Main cursor dot */}
        <div className="relative">
          {/* Outer rotating ring */}
          <div className="absolute inset-0 w-10 h-10 -translate-x-1/2 -translate-y-1/2">
            <div className="w-full h-full border-2 border-cyan-400/60 rounded-full animate-spin" style={{ animationDuration: '3s' }}>
              <div className="absolute top-0 left-1/2 w-1 h-1 bg-cyan-400 rounded-full -translate-x-1/2"></div>
            </div>
          </div>
          
          {/* Middle pulsing ring */}
          <div className="absolute inset-0 w-8 h-8 -translate-x-1/2 -translate-y-1/2">
            <div className="w-full h-full border-2 border-blue-400/80 rounded-full animate-pulse"></div>
          </div>
          
          {/* Inner glow */}
          <div className="absolute inset-0 w-6 h-6 -translate-x-1/2 -translate-y-1/2 bg-cyan-400/30 rounded-full blur-md"></div>
          
          {/* Center dot */}
          <div className={`absolute inset-0 w-2 h-2 -translate-x-1/2 -translate-y-1/2 rounded-full transition-all duration-200 ${
            isHovering ? 'bg-yellow-400 scale-150' : 'bg-cyan-400'
          }`}></div>
          
          {/* Crosshair lines */}
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
            <div className="absolute w-16 h-[2px] bg-gradient-to-r from-transparent via-cyan-400 to-transparent -translate-x-1/2"></div>
            <div className="absolute h-16 w-[2px] bg-gradient-to-b from-transparent via-cyan-400 to-transparent -translate-y-1/2"></div>
          </div>
        </div>
      </div>

      {/* Cursor Trail Particles */}
      {cursorTrail.map((trail) => (
        <div
          key={trail.id}
          className="fixed pointer-events-none z-[99998] animate-[trail_0.8s_ease-out_forwards]"
          style={{
            left: trail.x,
            top: trail.y,
            width: trail.size,
            height: trail.size,
            animationDelay: `${trail.delay}ms`,
          }}
        >
          <div className="w-full h-full bg-gradient-to-br from-cyan-400 via-blue-400 to-indigo-400 rounded-full blur-[2px] shadow-lg shadow-cyan-400/50"></div>
        </div>
      ))}

      <style>{`
        @keyframes trail {
          0% {
            transform: scale(1) translateY(0);
            opacity: 0.8;
          }
          100% {
            transform: scale(0) translateY(-40px);
            opacity: 0;
          }
        }
        
        * {
          cursor: none !important;
        }
        
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      `}</style>

      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Mouse-following gradient */}
        <div
          className="absolute w-[800px] h-[800px] bg-gradient-to-r from-blue-500/30 via-cyan-500/20 to-indigo-500/30 rounded-full blur-3xl transition-all duration-1000"
          style={{
            top: mousePosition.y / 20 - 400,
            left: mousePosition.x / 20 - 400,
          }}
        />
        
        {/* Grid overlay */}
        <div className="absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:100px_100px]" />
        
        {/* Floating particles */}
        <div className="absolute top-20 left-20 w-2 h-2 bg-blue-400 rounded-full animate-ping" />
        <div className="absolute top-40 right-40 w-2 h-2 bg-cyan-400 rounded-full animate-ping" style={{ animationDelay: '1s' }} />
        <div className="absolute bottom-40 left-60 w-2 h-2 bg-indigo-400 rounded-full animate-ping" style={{ animationDelay: '2s' }} />
      </div>

      {/* Header */}
      <header className="relative backdrop-blur-xl bg-white/5 border-b border-blue-400/20 shadow-2xl">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <Button
            variant="ghost"
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
            onClick={handleBackToDashboard}
            className="mb-4 text-blue-200 hover:text-blue-100 hover:bg-white/10 backdrop-blur-md transition-all duration-300 hover:-translate-x-1"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Dashboard
          </Button>
          <div className="flex items-center gap-4">
            <div 
              className="p-3 bg-gradient-to-br from-blue-500/20 to-cyan-500/20 rounded-2xl backdrop-blur-xl border border-blue-400/30 hover:rotate-12 transition-transform duration-300"
              onMouseEnter={() => setIsHovering(true)}
              onMouseLeave={() => setIsHovering(false)}
            >
              <DollarSign className="h-8 w-8 text-blue-400" />
            </div>
            <div>
              <h1 className="text-4xl font-black bg-gradient-to-r from-blue-400 via-cyan-400 to-indigo-400 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(59,130,246,0.8)]">
                Payroll Automation
              </h1>
              <p className="text-blue-200/80 font-medium mt-1">Calculate and generate salary slips with precision</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
        <Card 
          className="backdrop-blur-2xl bg-white/10 border border-blue-400/20 shadow-2xl shadow-blue-500/20 rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-blue-500/40 hover:-translate-y-2"
          onMouseEnter={() => setIsHovering(true)}
          onMouseLeave={() => setIsHovering(false)}
        >
          {/* Glow effect at top */}
          <div className="absolute top-0 left-1/2 -translate-x-1/2 w-96 h-32 bg-gradient-to-b from-blue-500/20 to-transparent blur-2xl" />
          
          <CardHeader className="relative">
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-3xl font-black text-blue-100 flex items-center gap-3">
                  <Calculator className="h-7 w-7 text-cyan-400 hover:rotate-12 transition-transform duration-300" />
                  Employee Salary Calculator
                </CardTitle>
                <CardDescription className="text-blue-200/70 mt-2 text-base">
                  Enter employee details below to calculate net salary
                </CardDescription>
              </div>
              <div className="hidden sm:block px-4 py-2 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 rounded-xl backdrop-blur-md border border-blue-400/30">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                  <span className="text-sm text-blue-200 font-semibold">Live System</span>
                </div>
              </div>
            </div>
          </CardHeader>

          <CardContent className="space-y-8 p-8">
            {/* Employee Name */}
            <div className="space-y-3 group">
              <Label htmlFor="employeeName" className="text-blue-100 font-bold text-lg flex items-center gap-2">
                <Sparkles className="h-4 w-4 text-cyan-400" />
                Employee Name
              </Label>
              <Input
                id="employeeName"
                placeholder="Enter full employee name"
                value={formData.employeeName}
                onChange={(e) => handleInputChange("employeeName", e.target.value)}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
                className="bg-white/5 backdrop-blur-xl text-blue-100 border border-blue-400/30 rounded-xl h-12 placeholder:text-blue-300/40 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/30 transition-all duration-300 hover:bg-white/10"
              />
              <p className="text-blue-300/60 text-sm pl-1">
                💡 Ensure the name matches official records
              </p>
            </div>

            {/* Salary Inputs Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {[
                { id: "basicSalary", label: "Basic Salary", icon: "💰" },
                { id: "allowances", label: "Allowances", icon: "➕" },
                { id: "deductions", label: "Deductions", icon: "➖" },
                { id: "bonuses", label: "Bonuses", icon: "🎁" }
              ].map((field) => (
                <div key={field.id} className="space-y-3 group">
                  <Label htmlFor={field.id} className="text-blue-100 font-bold flex items-center gap-2">
                    <span>{field.icon}</span>
                    {field.label} (₹)
                  </Label>
                  <div className="relative">
                    <Input
                      id={field.id}
                      type="number"
                      placeholder="0.00"
                      value={formData[field.id as keyof FormData]}
                      onChange={(e) => handleInputChange(field.id as keyof FormData, e.target.value)}
                      onMouseEnter={() => setIsHovering(true)}
                      onMouseLeave={() => setIsHovering(false)}
                      className="bg-white/5 backdrop-blur-xl text-blue-100 border border-blue-400/30 rounded-xl h-12 placeholder:text-blue-300/40 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/30 transition-all duration-300 hover:bg-white/10 pl-4"
                    />
                    <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/0 via-cyan-500/5 to-blue-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
                  </div>
                </div>
              ))}
            </div>

            {/* Calculate Button */}
            <div className="flex gap-4 pt-4">
              <Button
                onClick={calculateSalary}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
                className="flex-1 h-14 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-500 hover:to-blue-600 text-white font-bold text-lg rounded-xl shadow-2xl shadow-blue-500/50 transition-all duration-300 hover:scale-[1.02] hover:shadow-blue-500/70 border border-blue-400/30"
              >
                <Calculator className="mr-2 h-5 w-5" />
                Calculate & Save Payroll
              </Button>
            </div>

            {/* Display Net Salary */}
            {showResult && netSalary !== null && (
              <Card 
                className="backdrop-blur-2xl bg-gradient-to-br from-slate-800/90 via-blue-900/80 to-indigo-900/90 border-2 border-cyan-400/60 shadow-2xl shadow-cyan-500/60 rounded-3xl overflow-hidden animate-in fade-in duration-700 relative"
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
              >
                {/* Top glow effect */}
                <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-cyan-400 to-transparent animate-pulse" />
                
                {/* Corner badge */}
                <div className="absolute top-4 right-4 px-3 py-1 bg-gradient-to-r from-yellow-400/30 to-amber-400/30 rounded-full backdrop-blur-md border border-yellow-400/50 flex items-center gap-1 shadow-lg shadow-yellow-400/30">
                  <Sparkles className="h-3 w-3 text-yellow-300" />
                  <span className="text-xs text-yellow-100 font-bold">Calculated</span>
                </div>

                <CardContent className="pt-12 pb-12 px-8 text-center relative">
                  {/* Background glow */}
                  <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 via-transparent to-blue-500/10 blur-2xl" />
                  
                  <div className="relative z-10">
                    <p className="text-xl text-cyan-300 mb-4 font-semibold tracking-wide uppercase drop-shadow-[0_0_10px_rgba(34,211,238,0.8)]">Net Salary</p>
                    <div className="relative inline-block mb-8">
                      <p className="text-7xl font-black text-white drop-shadow-[0_0_50px_rgba(6,182,212,0.9)] animate-pulse">
                        ₹{netSalary.toFixed(2)}
                      </p>
                      {/* Glow rings */}
                      <div className="absolute inset-0 bg-cyan-400/20 blur-3xl rounded-full animate-pulse" />
                    </div>
                    
                    <Button
                      onClick={downloadSlip}
                      onMouseEnter={() => setIsHovering(true)}
                      onMouseLeave={() => setIsHovering(false)}
                      className="mt-2 px-8 py-4 h-auto bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white text-lg font-bold rounded-2xl shadow-2xl shadow-cyan-500/50 transition-all duration-300 hover:scale-105 hover:shadow-cyan-500/70 border border-cyan-400/30 group"
                    >
                      <Download className="mr-2 h-5 w-5 group-hover:translate-y-1 transition-transform duration-300" />
                      Download Salary Slip
                    </Button>
                    
                    <p className="text-cyan-200/80 text-sm mt-6 flex items-center justify-center gap-2 font-medium">
                      <span className="w-1.5 h-1.5 bg-cyan-400 rounded-full animate-pulse" />
                      Save the slip for your records
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}
          </CardContent>
        </Card>

        {/* Bottom floating info */}
        <div className="mt-8 text-center">
          <p className="text-blue-300/50 text-sm backdrop-blur-md inline-block px-6 py-2 rounded-full border border-blue-400/20">
            Powered by Advanced Payroll Engine ✨
          </p>
        </div>
      </main>
    </div>
  );
};

export default Payroll;