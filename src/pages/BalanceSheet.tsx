import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, Calculator, Download, TrendingUp, AlertCircle, CheckCircle } from "lucide-react";
import { useNavigate } from "react-router-dom";

const BalanceSheet = () => {
  const navigate = useNavigate();
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [cursorTrail, setCursorTrail] = useState([]);
  const [isHovering, setIsHovering] = useState(false);
  
  const [formData, setFormData] = useState({
    currentAssets: "",
    nonCurrentAssets: "",
    currentLiabilities: "",
    nonCurrentLiabilities: "",
    equity: "",
  });
  const [balanceSheet, setBalanceSheet] = useState(null);

  // Mouse tracking with trail effect
  useEffect(() => {
    let trailId = 0;
    
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
      
      const newTrails = [];
      for (let i = 0; i < 3; i++) {
        const trail = {
          id: trailId++,
          x: e.clientX + (Math.random() - 0.5) * 20,
          y: e.clientY + (Math.random() - 0.5) * 20,
          size: Math.random() * 8 + 4,
          delay: i * 50,
        };
        newTrails.push(trail);
      }
      
      setCursorTrail((prev) => [...prev, ...newTrails].slice(-30));
      
      setTimeout(() => {
        setCursorTrail((prev) => prev.filter((t) => !newTrails.find(nt => nt.id === t.id)));
      }, 800);
    };
    
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const generateBalanceSheet = () => {
    const currentAssets = parseFloat(formData.currentAssets) || 0;
    const nonCurrentAssets = parseFloat(formData.nonCurrentAssets) || 0;
    const currentLiabilities = parseFloat(formData.currentLiabilities) || 0;
    const nonCurrentLiabilities = parseFloat(formData.nonCurrentLiabilities) || 0;
    const equity = parseFloat(formData.equity) || 0;

    const totalAssets = currentAssets + nonCurrentAssets;
    const totalLiabilities = currentLiabilities + nonCurrentLiabilities;
    const totalEquityLiabilities = totalLiabilities + equity;

    const balanced = Math.abs(totalAssets - totalEquityLiabilities) < 0.01;

    const dataToSave = {
      currentAssets,
      nonCurrentAssets,
      totalAssets,
      currentLiabilities,
      nonCurrentLiabilities,
      totalLiabilities,
      equity,
      totalEquityLiabilities,
      balanced,
    };

    setBalanceSheet(dataToSave);
  };

  const downloadReport = () => {
    if (!balanceSheet) return;

    const content = `
╔═══════════════════════════════════════════════╗
║       BALANCE SHEET - ${new Date().toLocaleDateString()}           ║
╚═══════════════════════════════════════════════╝

ASSETS
────────────────────────────────────────────────
Current Assets:             ₹${balanceSheet.currentAssets.toFixed(2)}
Non-Current Assets:         ₹${balanceSheet.nonCurrentAssets.toFixed(2)}
────────────────────────────────────────────────
Total Assets:               ₹${balanceSheet.totalAssets.toFixed(2)}

LIABILITIES & EQUITY
────────────────────────────────────────────────
Current Liabilities:        ₹${balanceSheet.currentLiabilities.toFixed(2)}
Non-Current Liabilities:    ₹${balanceSheet.nonCurrentLiabilities.toFixed(2)}
Equity:                     ₹${balanceSheet.equity.toFixed(2)}
────────────────────────────────────────────────
Total Liabilities & Equity: ₹${balanceSheet.totalEquityLiabilities.toFixed(2)}

════════════════════════════════════════════════
STATUS: ${balanceSheet.balanced ? '✓ BALANCED' : '✗ UNBALANCED'}
════════════════════════════════════════════════

${balanceSheet.balanced ? 'All accounts are perfectly balanced.' : 'Warning: Assets and Liabilities do not match.'}

Generated by Financial Automation Platform
Powered by Advanced Financial Analytics Engine ✨
    `.trim();

    const blob = new Blob([content], { type: "text/plain" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `Balance_Sheet_${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  const handleBackToDashboard = () => {
    navigate("/dashboard");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-950 to-indigo-950 relative overflow-hidden">
      {/* Advanced Custom Cursor System */}
      <div 
        className="fixed pointer-events-none z-[99999]"
        style={{
          left: mousePosition.x,
          top: mousePosition.y,
          transform: 'translate(-50%, -50%)',
        }}
      >
        {/* Main cursor container */}
        <div className="relative">
          {/* 1. Rotating Outer Ring with marker dot */}
          <div className="absolute inset-0 w-10 h-10 -translate-x-1/2 -translate-y-1/2">
            <div className="w-full h-full border-2 border-cyan-400/60 rounded-full animate-spin" style={{ animationDuration: '3s' }}>
              <div className="absolute top-0 left-1/2 w-1 h-1 bg-cyan-400 rounded-full -translate-x-1/2"></div>
            </div>
          </div>
          
          {/* 2. Middle Pulsing Ring */}
          <div className="absolute inset-0 w-8 h-8 -translate-x-1/2 -translate-y-1/2">
            <div className="w-full h-full border-2 border-blue-400/80 rounded-full animate-pulse"></div>
          </div>
          
          {/* 3. Inner Glow */}
          <div className="absolute inset-0 w-6 h-6 -translate-x-1/2 -translate-y-1/2 bg-cyan-400/30 rounded-full blur-md"></div>
          
          {/* 4. Center Dot - Main cursor indicator */}
          <div className={`absolute inset-0 w-2 h-2 -translate-x-1/2 -translate-y-1/2 rounded-full transition-all duration-200 ${
            isHovering ? 'bg-yellow-400 scale-150 shadow-[0_0_20px_rgba(250,204,21,0.8)]' : 'bg-cyan-400 shadow-[0_0_15px_rgba(6,182,212,0.8)]'
          }`}></div>
          
          {/* 5. Crosshair Lines */}
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
            {/* Horizontal line */}
            <div className="absolute w-16 h-[2px] bg-gradient-to-r from-transparent via-cyan-400 to-transparent -translate-x-1/2"></div>
            {/* Vertical line */}
            <div className="absolute h-16 w-[2px] bg-gradient-to-b from-transparent via-cyan-400 to-transparent -translate-y-1/2"></div>
          </div>
        </div>
      </div>

      {/* 6. Sparkle Particle Trail System */}
      {cursorTrail.map((trail) => (
        <div
          key={trail.id}
          className="fixed pointer-events-none z-[99998] animate-[sparkleTrail_0.8s_ease-out_forwards]"
          style={{
            left: trail.x,
            top: trail.y,
            width: trail.size,
            height: trail.size,
            animationDelay: `${trail.delay}ms`,
          }}
        >
          {/* Sparkle particle with star shape */}
          <div className="relative w-full h-full">
            <div className="absolute inset-0 bg-gradient-to-br from-cyan-400 via-blue-400 to-indigo-400 rounded-full blur-[2px] shadow-lg shadow-cyan-400/50"></div>
            {/* Star points */}
            <div className="absolute top-0 left-1/2 w-[2px] h-full bg-cyan-400/60 -translate-x-1/2"></div>
            <div className="absolute top-1/2 left-0 w-full h-[2px] bg-cyan-400/60 -translate-y-1/2"></div>
          </div>
        </div>
      ))}

      <style>{`
        @keyframes sparkleTrail {
          0% {
            transform: scale(1) translateY(0) rotate(0deg);
            opacity: 0.8;
          }
          100% {
            transform: scale(0) translateY(-40px) rotate(180deg);
            opacity: 0;
          }
        }
        
        * {
          cursor: none !important;
        }
      `}</style>

      {/* Animated Background Effects */}
      <div className="absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:50px_50px]" />
      
      {/* Mouse-following gradient orb */}
      <div 
        className="absolute w-[800px] h-[800px] bg-gradient-to-r from-blue-500/30 via-cyan-500/20 to-indigo-500/30 rounded-full blur-3xl transition-all duration-1000 pointer-events-none"
        style={{ 
          top: mousePosition.y / 20 - 400, 
          left: mousePosition.x / 20 - 400 
        }}
      />

      {/* Floating particles */}
      <div className="absolute top-20 left-20 w-2 h-2 bg-blue-400 rounded-full animate-ping" />
      <div className="absolute top-40 right-40 w-3 h-3 bg-cyan-400 rounded-full animate-pulse" />
      <div className="absolute bottom-32 left-1/3 w-2 h-2 bg-indigo-400 rounded-full animate-ping" style={{ animationDelay: '1s' }} />

      {/* Header */}
      <header className="relative backdrop-blur-xl bg-white/5 border-b border-blue-400/20 shadow-2xl shadow-blue-500/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <Button 
            variant="ghost"
            onClick={handleBackToDashboard}
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
            className="mb-4 text-blue-200 hover:text-blue-100 hover:bg-white/10 transition-all duration-300 group backdrop-blur-xl"
          >
            <ArrowLeft className="mr-2 h-4 w-4 group-hover:-translate-x-1 transition-transform" />
            Back to Dashboard
          </Button>
          <div className="flex items-center gap-4">
            <div 
              className="p-4 bg-gradient-to-br from-blue-500/20 to-cyan-500/20 rounded-2xl backdrop-blur-xl border border-blue-400/30 shadow-2xl shadow-blue-500/40"
              onMouseEnter={() => setIsHovering(true)}
              onMouseLeave={() => setIsHovering(false)}
            >
              <TrendingUp className="h-8 w-8 text-blue-300" />
            </div>
            <div>
              <h1 className="text-4xl font-black bg-gradient-to-r from-blue-400 via-cyan-400 to-indigo-400 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(59,130,246,0.8)]">
                Balance Sheet Generator
              </h1>
              <p className="text-blue-200/80 font-medium mt-1">Create comprehensive financial statements with real-time validation</p>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Card */}
          <Card 
            className="backdrop-blur-2xl bg-white/10 border border-blue-400/30 shadow-2xl shadow-blue-500/40 rounded-3xl overflow-hidden group hover:-translate-y-2 transition-all duration-500"
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
          >
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-transparent to-cyan-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
            
            <CardHeader className="relative">
              <div className="absolute top-4 right-4 flex gap-2">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }} />
              </div>
              <CardTitle className="text-2xl font-bold text-white">Enter Balance Sheet Data</CardTitle>
              <CardDescription className="text-blue-300">Input your financial values below</CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-6 relative">
              {/* Assets Section */}
              <div className="space-y-4 p-6 rounded-2xl bg-gradient-to-br from-blue-500/5 to-cyan-500/5 border border-blue-400/20 backdrop-blur-xl">
                <h3 className="font-bold text-lg text-white flex items-center gap-2">
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center shadow-lg shadow-blue-500/50">
                    <TrendingUp className="h-4 w-4 text-white" />
                  </div>
                  Assets
                </h3>
                <div className="space-y-2">
                  <Label htmlFor="currentAssets" className="text-white font-medium">Current Assets (₹)</Label>
                  <Input
                    id="currentAssets"
                    type="number"
                    placeholder="0.00"
                    value={formData.currentAssets}
                    onChange={(e) => handleInputChange("currentAssets", e.target.value)}
                    onMouseEnter={() => setIsHovering(true)}
                    onMouseLeave={() => setIsHovering(false)}
                    className="bg-slate-900/50 text-white border-blue-400/30 backdrop-blur-xl focus:border-blue-400 focus:ring-2 focus:ring-blue-400/50 transition-all placeholder:text-blue-400/30"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="nonCurrentAssets" className="text-white font-medium">Non-Current Assets (₹)</Label>
                  <Input
                    id="nonCurrentAssets"
                    type="number"
                    placeholder="0.00"
                    value={formData.nonCurrentAssets}
                    onChange={(e) => handleInputChange("nonCurrentAssets", e.target.value)}
                    onMouseEnter={() => setIsHovering(true)}
                    onMouseLeave={() => setIsHovering(false)}
                    className="bg-slate-900/50 text-white border-blue-400/30 backdrop-blur-xl focus:border-blue-400 focus:ring-2 focus:ring-blue-400/50 transition-all placeholder:text-blue-400/30"
                  />
                </div>
              </div>

              {/* Liabilities & Equity Section */}
              <div className="space-y-4 p-6 rounded-2xl bg-gradient-to-br from-indigo-500/5 to-purple-500/5 border border-indigo-400/20 backdrop-blur-xl">
                <h3 className="font-bold text-lg text-white flex items-center gap-2">
                  <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-lg flex items-center justify-center shadow-lg shadow-indigo-500/50">
                    <Calculator className="h-4 w-4 text-white" />
                  </div>
                  Liabilities & Equity
                </h3>
                <div className="space-y-2">
                  <Label htmlFor="currentLiabilities" className="text-white font-medium">Current Liabilities (₹)</Label>
                  <Input
                    id="currentLiabilities"
                    type="number"
                    placeholder="0.00"
                    value={formData.currentLiabilities}
                    onChange={(e) => handleInputChange("currentLiabilities", e.target.value)}
                    onMouseEnter={() => setIsHovering(true)}
                    onMouseLeave={() => setIsHovering(false)}
                    className="bg-slate-900/50 text-white border-blue-400/30 backdrop-blur-xl focus:border-blue-400 focus:ring-2 focus:ring-blue-400/50 transition-all placeholder:text-blue-400/30"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="nonCurrentLiabilities" className="text-white font-medium">Non-Current Liabilities (₹)</Label>
                  <Input
                    id="nonCurrentLiabilities"
                    type="number"
                    placeholder="0.00"
                    value={formData.nonCurrentLiabilities}
                    onChange={(e) => handleInputChange("nonCurrentLiabilities", e.target.value)}
                    onMouseEnter={() => setIsHovering(true)}
                    onMouseLeave={() => setIsHovering(false)}
                    className="bg-slate-900/50 text-white border-blue-400/30 backdrop-blur-xl focus:border-blue-400 focus:ring-2 focus:ring-blue-400/50 transition-all placeholder:text-blue-400/30"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="equity" className="text-white font-medium">Equity (₹)</Label>
                  <Input
                    id="equity"
                    type="number"
                    placeholder="0.00"
                    value={formData.equity}
                    onChange={(e) => handleInputChange("equity", e.target.value)}
                    onMouseEnter={() => setIsHovering(true)}
                    onMouseLeave={() => setIsHovering(false)}
                    className="bg-slate-900/50 text-white border-blue-400/30 backdrop-blur-xl focus:border-blue-400 focus:ring-2 focus:ring-blue-400/50 transition-all placeholder:text-blue-400/30"
                  />
                </div>
              </div>

              <Button 
                onClick={generateBalanceSheet}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
                className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-500 hover:to-cyan-500 text-white font-bold py-6 rounded-xl shadow-2xl shadow-blue-500/60 hover:shadow-blue-400/80 hover:scale-[1.02] transition-all duration-300 group"
              >
                <Calculator className="mr-2 h-5 w-5 group-hover:rotate-12 transition-transform" />
                Generate Balance Sheet
              </Button>
            </CardContent>
          </Card>

          {/* Results Card */}
          {balanceSheet && (
            <Card 
              className={`backdrop-blur-2xl ${balanceSheet.balanced ? 'bg-slate-800/90 border-emerald-400/60 shadow-emerald-500/60' : 'bg-slate-800/90 border-red-400/60 shadow-red-500/60'} border-2 shadow-2xl rounded-3xl overflow-hidden group hover:-translate-y-2 transition-all duration-500 animate-in fade-in slide-in-from-right`}
              onMouseEnter={() => setIsHovering(true)}
              onMouseLeave={() => setIsHovering(false)}
            >
              <div className={`absolute inset-0 bg-gradient-to-br ${balanceSheet.balanced ? 'from-emerald-500/10 via-transparent to-cyan-500/10' : 'from-red-500/10 via-transparent to-orange-500/10'} opacity-0 group-hover:opacity-100 transition-opacity duration-500`} />
              
              {/* Status Badge */}
              <div className="absolute top-6 right-6 z-10">
                <div className={`px-4 py-2 rounded-full backdrop-blur-xl ${balanceSheet.balanced ? 'bg-emerald-500/30 border border-emerald-400/50' : 'bg-red-500/30 border border-red-400/50'} flex items-center gap-2 shadow-lg`}>
                  {balanceSheet.balanced ? (
                    <>
                      <CheckCircle className="h-4 w-4 text-emerald-300" />
                      <span className="text-emerald-100 font-bold text-sm">Balanced</span>
                    </>
                  ) : (
                    <>
                      <AlertCircle className="h-4 w-4 text-red-300" />
                      <span className="text-red-100 font-bold text-sm">Unbalanced</span>
                    </>
                  )}
                </div>
              </div>

              <CardHeader className="relative pt-8">
                <CardTitle className="text-2xl font-bold text-white">Balance Sheet Report</CardTitle>
                <CardDescription className={balanceSheet.balanced ? "text-emerald-200" : "text-red-200"}>
                  {balanceSheet.balanced ? "All accounts are perfectly balanced ✓" : "Review required - totals don't match"}
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-6 relative">
                {/* Assets Display */}
                <div className="p-6 rounded-2xl bg-gradient-to-br from-blue-500/10 to-cyan-500/10 border border-blue-400/20 backdrop-blur-xl">
                  <h3 className="font-bold mb-4 text-white text-lg">Assets</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center text-white py-2">
                      <span className="font-medium">Current Assets</span>
                      <span className="font-bold text-cyan-300">₹{balanceSheet.currentAssets.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between items-center text-white py-2">
                      <span className="font-medium">Non-Current Assets</span>
                      <span className="font-bold text-cyan-300">₹{balanceSheet.nonCurrentAssets.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between items-center font-bold border-t border-blue-400/30 pt-3 mt-3">
                      <span className="text-white text-lg">Total Assets</span>
                      <span className="text-xl text-white drop-shadow-[0_0_20px_rgba(6,182,212,0.8)]">₹{balanceSheet.totalAssets.toFixed(2)}</span>
                    </div>
                  </div>
                </div>

                {/* Liabilities & Equity Display */}
                <div className="p-6 rounded-2xl bg-gradient-to-br from-indigo-500/10 to-purple-500/10 border border-indigo-400/20 backdrop-blur-xl">
                  <h3 className="font-bold mb-4 text-white text-lg">Liabilities & Equity</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center text-white py-2">
                      <span className="font-medium">Current Liabilities</span>
                      <span className="font-bold text-purple-300">₹{balanceSheet.currentLiabilities.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between items-center text-white py-2">
                      <span className="font-medium">Non-Current Liabilities</span>
                      <span className="font-bold text-purple-300">₹{balanceSheet.nonCurrentLiabilities.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between items-center text-white py-2">
                      <span className="font-medium">Equity</span>
                      <span className="font-bold text-purple-300">₹{balanceSheet.equity.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between items-center font-bold border-t border-indigo-400/30 pt-3 mt-3">
                      <span className="text-white text-lg">Total Liabilities & Equity</span>
                      <span className="text-xl text-white drop-shadow-[0_0_20px_rgba(147,51,234,0.8)]">₹{balanceSheet.totalEquityLiabilities.toFixed(2)}</span>
                    </div>
                  </div>
                </div>

                <Button 
                  onClick={downloadReport}
                  onMouseEnter={() => setIsHovering(true)}
                  onMouseLeave={() => setIsHovering(false)}
                  className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-500 hover:to-indigo-500 text-white font-bold py-6 rounded-xl shadow-2xl shadow-blue-500/60 hover:shadow-blue-400/80 hover:scale-[1.02] transition-all duration-300 group"
                >
                  <Download className="mr-2 h-5 w-5 group-hover:translate-y-1 transition-transform" />
                  Download Report
                </Button>
              </CardContent>
            </Card>
          )}
        </div>
      </main>
    </div>
  );
};

export default BalanceSheet;