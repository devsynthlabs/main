import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Download, Search, Sparkles, Database } from "lucide-react";

interface Trail {
  id: number;
  x: number;
  y: number;
  size: number;
  delay: number;
}

interface TaxReturn {
  _id: string;
  transactionType: string;
  gstRate: number;
  baseAmount: number;
  cgst: number;
  sgst: number;
  igst: number;
  total: number;
  createdAt: string;
}

const Returns = () => {
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState("");
  const [returns, setReturns] = useState<TaxReturn[]>([]);
  const [filteredReturns, setFilteredReturns] = useState<TaxReturn[]>([]);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [cursorTrail, setCursorTrail] = useState<Trail[]>([]);
  const [isHovering, setIsHovering] = useState(false);

  // Mouse tracking with trail effect
  useEffect(() => {
    let trailId = 0;
    
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
      
      const newTrails: Trail[] = [];
      for (let i = 0; i < 3; i++) {
        const trail: Trail = {
          id: trailId++,
          x: e.clientX + (Math.random() - 0.5) * 20,
          y: e.clientY + (Math.random() - 0.5) * 20,
          size: Math.random() * 8 + 4,
          delay: i * 50,
        };
        newTrails.push(trail);
      }
      
      setCursorTrail((prev) => [...prev, ...newTrails].slice(-30));
      
      setTimeout(() => {
        setCursorTrail((prev) => prev.filter((t) => !newTrails.find(nt => nt.id === t.id)));
      }, 800);
    };
    
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  // Fetch GST data from backend
  useEffect(() => {
    const fetchReturns = async () => {
      try {
        const response = await fetch("http://localhost:5000/api/tax/all");
        const data = await response.json();
        setReturns(data);
        setFilteredReturns(data);
      } catch (error) {
        console.error("Error fetching GST data:", error);
      }
    };
    fetchReturns();
  }, []);

  // Search function
  const handleSearch = () => {
    const filtered = returns.filter(
      (ret) =>
        ret.transactionType?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        ret.gstRate?.toString().includes(searchTerm)
    );
    setFilteredReturns(filtered);
  };

  const downloadPDF = (ret: TaxReturn) => {
    const content = `
╔═══════════════════════════════════════════════╗
║       GST TAX RETURN - ${new Date(ret.createdAt).toLocaleDateString()}        ║
╚═══════════════════════════════════════════════╝

Transaction Type: ${ret.transactionType === "intrastate" ? "Intrastate (CGST + SGST)" : "Interstate (IGST)"}
GST Rate: ${ret.gstRate}%

TRANSACTION DETAILS
────────────────────────────────────────────────
Base Amount:                ₹${ret.baseAmount?.toFixed(2) || '0.00'}

${ret.cgst > 0 ? `
TAX BREAKDOWN (INTRASTATE)
────────────────────────────────────────────────
CGST (${ret.gstRate / 2}%):              ₹${ret.cgst.toFixed(2)}
SGST (${ret.gstRate / 2}%):              ₹${ret.sgst.toFixed(2)}
` : ''}
${ret.igst > 0 ? `
TAX BREAKDOWN (INTERSTATE)
────────────────────────────────────────────────
IGST (${ret.gstRate}%):              ₹${ret.igst.toFixed(2)}
` : ''}

════════════════════════════════════════════════
TOTAL AMOUNT WITH GST:      ₹${ret.total.toFixed(2)}
════════════════════════════════════════════════

Generated by Financial Automation Platform
Powered by Advanced Tax Calculation Engine ✨
    `.trim();

    const blob = new Blob([content], { type: "text/plain" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `GST_Return_${ret.transactionType}_${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  const handleBackToDashboard = () => {
    navigate("/dashboard");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-950 to-indigo-950 text-blue-100 relative overflow-hidden">
      {/* Advanced Custom Cursor System */}
      <div 
        className="fixed pointer-events-none z-[99999]"
        style={{
          left: mousePosition.x,
          top: mousePosition.y,
          transform: 'translate(-50%, -50%)',
        }}
      >
        {/* Main cursor container */}
        <div className="relative">
          {/* 1. Rotating Outer Ring with marker dot */}
          <div className="absolute inset-0 w-10 h-10 -translate-x-1/2 -translate-y-1/2">
            <div className="w-full h-full border-2 border-cyan-400/60 rounded-full animate-spin" style={{ animationDuration: '3s' }}>
              <div className="absolute top-0 left-1/2 w-1 h-1 bg-cyan-400 rounded-full -translate-x-1/2"></div>
            </div>
          </div>
          
          {/* 2. Middle Pulsing Ring */}
          <div className="absolute inset-0 w-8 h-8 -translate-x-1/2 -translate-y-1/2">
            <div className="w-full h-full border-2 border-blue-400/80 rounded-full animate-pulse"></div>
          </div>
          
          {/* 3. Inner Glow */}
          <div className="absolute inset-0 w-6 h-6 -translate-x-1/2 -translate-y-1/2 bg-cyan-400/30 rounded-full blur-md"></div>
          
          {/* 4. Center Dot - Main cursor indicator */}
          <div className={`absolute inset-0 w-2 h-2 -translate-x-1/2 -translate-y-1/2 rounded-full transition-all duration-200 ${
            isHovering ? 'bg-yellow-400 scale-150 shadow-[0_0_20px_rgba(250,204,21,0.8)]' : 'bg-cyan-400 shadow-[0_0_15px_rgba(6,182,212,0.8)]'
          }`}></div>
          
          {/* 5. Crosshair Lines */}
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
            {/* Horizontal line */}
            <div className="absolute w-16 h-[2px] bg-gradient-to-r from-transparent via-cyan-400 to-transparent -translate-x-1/2"></div>
            {/* Vertical line */}
            <div className="absolute h-16 w-[2px] bg-gradient-to-b from-transparent via-cyan-400 to-transparent -translate-y-1/2"></div>
          </div>
        </div>
      </div>

      {/* 6. Sparkle Particle Trail System */}
      {cursorTrail.map((trail) => (
        <div
          key={trail.id}
          className="fixed pointer-events-none z-[99998] animate-[sparkleTrail_0.8s_ease-out_forwards]"
          style={{
            left: trail.x,
            top: trail.y,
            width: trail.size,
            height: trail.size,
            animationDelay: `${trail.delay}ms`,
          }}
        >
          {/* Sparkle particle with star shape */}
          <div className="relative w-full h-full">
            <div className="absolute inset-0 bg-gradient-to-br from-cyan-400 via-blue-400 to-indigo-400 rounded-full blur-[2px] shadow-lg shadow-cyan-400/50"></div>
            {/* Star points */}
            <div className="absolute top-0 left-1/2 w-[2px] h-full bg-cyan-400/60 -translate-x-1/2"></div>
            <div className="absolute top-1/2 left-0 w-full h-[2px] bg-cyan-400/60 -translate-y-1/2"></div>
          </div>
        </div>
      ))}

      <style>{`
        @keyframes sparkleTrail {
          0% {
            transform: scale(1) translateY(0) rotate(0deg);
            opacity: 0.8;
          }
          100% {
            transform: scale(0) translateY(-40px) rotate(180deg);
            opacity: 0;
          }
        }
        
        * {
          cursor: none !important;
        }
      `}</style>

      {/* Animated Background Elements */}
      <div className="fixed inset-0 pointer-events-none">
        {/* Grid Pattern */}
        <div className="absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:40px_40px]" />
        
        {/* Mouse-following gradient orb */}
        <div 
          className="absolute w-[800px] h-[800px] rounded-full bg-gradient-to-r from-blue-500/30 to-cyan-500/30 blur-3xl transition-all duration-1000 ease-out"
          style={{ 
            top: mousePosition.y / 20 - 400, 
            left: mousePosition.x / 20 - 400 
          }}
        />
        
        {/* Floating particles */}
        <div className="absolute top-20 left-20 w-2 h-2 bg-blue-400 rounded-full animate-ping" />
        <div className="absolute top-40 right-40 w-3 h-3 bg-cyan-400 rounded-full animate-pulse" />
        <div className="absolute bottom-32 left-1/3 w-2 h-2 bg-indigo-400 rounded-full animate-ping" style={{ animationDelay: '1s' }} />
      </div>

      {/* Header */}
      <header className="relative backdrop-blur-xl bg-white/5 border-b border-blue-400/20 shadow-2xl shadow-blue-500/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <Button 
            variant="ghost" 
            onClick={handleBackToDashboard}
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
            className="mb-4 text-blue-200 hover:text-white hover:bg-white/10 backdrop-blur-xl transition-all duration-300 hover:-translate-x-2"
          >
            <ArrowLeft className="mr-2 h-4 w-4 transition-transform duration-300 group-hover:-translate-x-1" />
            Back to Dashboard
          </Button>
          
          <div className="flex items-center gap-3">
            <div 
              className="p-3 rounded-2xl bg-gradient-to-br from-blue-500/20 to-cyan-500/20 backdrop-blur-xl border border-blue-400/30 shadow-lg shadow-blue-500/40"
              onMouseEnter={() => setIsHovering(true)}
              onMouseLeave={() => setIsHovering(false)}
            >
              <Database className="h-8 w-8 text-blue-300" />
            </div>
            <div>
              <h1 className="text-4xl font-black bg-gradient-to-r from-blue-400 via-cyan-400 to-indigo-400 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(59,130,246,0.8)]">
                Tax & GST Returns
              </h1>
              <p className="text-blue-200/80 font-medium mt-1">View, search, and download stored GST records</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10">
        {/* Search Section */}
        <Card 
          className="mb-8 backdrop-blur-2xl bg-white/10 border border-blue-400/30 rounded-3xl shadow-2xl shadow-blue-500/30 hover:shadow-blue-500/50 transition-all duration-500 hover:-translate-y-2"
          onMouseEnter={() => setIsHovering(true)}
          onMouseLeave={() => setIsHovering(false)}
        >
          <CardHeader>
            <div className="flex items-center gap-2">
              <Search className="h-5 w-5 text-cyan-400" />
              <CardTitle className="text-2xl font-bold text-blue-100">Search GST Records</CardTitle>
            </div>
            <CardDescription className="text-blue-300/70">Filter records by transaction type or GST rate</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-3 items-center">
              <div className="relative flex-1">
                <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-blue-400/60" />
                <Input
                  placeholder="Search by transaction type or GST rate..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  onMouseEnter={() => setIsHovering(true)}
                  onMouseLeave={() => setIsHovering(false)}
                  className="pl-12 h-12 bg-white/5 backdrop-blur-xl text-blue-100 border-blue-400/30 focus:border-cyan-400/50 rounded-2xl placeholder:text-blue-400/40 focus:ring-2 focus:ring-cyan-400/30 transition-all duration-300"
                />
              </div>
              <Button
                onClick={handleSearch}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
                className="h-12 px-6 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-500 hover:to-cyan-500 text-white font-bold rounded-2xl shadow-lg shadow-blue-500/40 hover:shadow-blue-500/60 hover:scale-105 transition-all duration-300"
              >
                <Search className="mr-2 h-5 w-5" />
                Search
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Records List */}
        {filteredReturns.length > 0 ? (
          <div className="grid gap-6">
            {filteredReturns.map((ret, index) => (
              <Card 
                key={ret._id} 
                className="backdrop-blur-2xl bg-white/5 border border-blue-400/20 rounded-3xl shadow-2xl shadow-blue-500/20 hover:shadow-cyan-500/60 hover:bg-white/10 transition-all duration-500 hover:-translate-y-4 hover:scale-[1.02] group relative overflow-hidden"
                style={{ animationDelay: `${index * 100}ms` }}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
              >
                {/* Enhanced glow effect on hover */}
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 blur-xl" />
                <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-transparent to-cyan-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                
                {/* Top glow line */}
                <div className="absolute top-0 left-0 right-0 h-[2px] bg-gradient-to-r from-transparent via-cyan-400 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                
                <CardContent className="pt-6 relative z-10">
                  <div className="flex flex-col md:flex-row md:items-center justify-between gap-6">
                    <div className="space-y-3">
                      <div className="flex items-center gap-3 flex-wrap">
                        <h3 className="font-bold text-xl text-blue-100 group-hover:text-white transition-colors duration-300 drop-shadow-[0_0_10px_rgba(255,255,255,0.3)]">
                          {ret.transactionType === "intrastate"
                            ? "Intrastate (CGST + SGST)"
                            : "Interstate (IGST)"}
                        </h3>
                        <Badge 
                          variant="outline" 
                          className="border-blue-400/40 text-blue-300 backdrop-blur-xl bg-blue-500/10 px-3 py-1 rounded-xl font-semibold group-hover:border-cyan-400/60 group-hover:text-cyan-300 transition-all duration-300"
                        >
                          {ret.transactionType}
                        </Badge>
                        <Badge className="bg-gradient-to-r from-green-500/80 to-emerald-500/80 text-white border-0 px-3 py-1 rounded-xl font-semibold shadow-lg shadow-green-500/30 flex items-center gap-1 group-hover:shadow-green-500/50 transition-all duration-300">
                          <div className="w-2 h-2 bg-green-300 rounded-full animate-pulse" />
                          Saved
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <p className="text-sm text-blue-300/80 flex items-center gap-2 group-hover:text-blue-200 transition-colors duration-300">
                          <span className="w-1.5 h-1.5 bg-cyan-400 rounded-full group-hover:shadow-[0_0_8px_rgba(6,182,212,0.8)] transition-shadow duration-300" />
                          Date: {new Date(ret.createdAt).toLocaleDateString()}
                        </p>

                        <p className="text-base font-bold text-blue-200 group-hover:text-white transition-colors duration-300">
                          Base Amount: <span className="text-cyan-300 group-hover:text-cyan-200 drop-shadow-[0_0_10px_rgba(6,182,212,0.6)]">₹{ret.baseAmount?.toLocaleString() || '0'}</span>
                        </p>

                        {(ret.cgst || 0) > 0 && (
                          <div className="space-y-1 pl-4 border-l-2 border-blue-400/30 group-hover:border-cyan-400/50 transition-colors duration-300">
                            <p className="text-sm text-blue-300 group-hover:text-blue-200">CGST: ₹{(ret.cgst || 0).toFixed(2)}</p>
                            <p className="text-sm text-blue-300 group-hover:text-blue-200">SGST: ₹{(ret.sgst || 0).toFixed(2)}</p>
                          </div>
                        )}

                        {(ret.igst || 0) > 0 && (
                          <p className="text-sm text-blue-300 pl-4 border-l-2 border-blue-400/30 group-hover:border-cyan-400/50 group-hover:text-blue-200 transition-all duration-300">
                            IGST: ₹{(ret.igst || 0).toFixed(2)}
                          </p>
                        )}

                        <p className="text-lg font-black text-transparent bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text group-hover:from-cyan-200 group-hover:to-blue-200 drop-shadow-[0_0_15px_rgba(6,182,212,0.5)] transition-all duration-300">
                          Total with GST: ₹{(ret.total || 0).toFixed(2)}
                        </p>
                      </div>
                    </div>

                    <Button 
                      variant="outline"
                      onClick={() => downloadPDF(ret)}
                      onMouseEnter={() => setIsHovering(true)}
                      onMouseLeave={() => setIsHovering(false)}
                      className="text-blue-200 border-2 border-blue-400/40 hover:bg-gradient-to-r hover:from-blue-600/80 hover:to-cyan-600/80 hover:border-cyan-400/60 hover:text-white backdrop-blur-xl bg-white/5 rounded-2xl px-6 py-6 font-bold shadow-lg hover:shadow-cyan-500/40 transition-all duration-300 hover:scale-110 group/btn"
                    >
                      <Download className="mr-2 h-5 w-5 group-hover/btn:animate-bounce" />
                      Download PDF
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <Card 
            className="backdrop-blur-2xl bg-white/5 border border-blue-400/20 rounded-3xl shadow-2xl shadow-blue-500/30"
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
          >
            <CardContent className="pt-6 text-center py-16">
              <div className="flex flex-col items-center gap-4">
                <div className="p-6 rounded-full bg-gradient-to-br from-blue-500/20 to-cyan-500/20 backdrop-blur-xl border border-blue-400/30 shadow-lg shadow-blue-500/40">
                  <Sparkles className="h-12 w-12 text-blue-300 animate-pulse" />
                </div>
                <p className="text-blue-300/80 text-lg font-medium">No GST data found yet.</p>
                <p className="text-blue-400/60 text-sm">Start by adding some transactions to see them here</p>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
};

export default Returns;