# -*- coding: utf-8 -*-
"""CASH FLOW PREDICTION UI_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JgUqUXOzUCUiDIOxXZHx81DpqA0gZmGy
"""

# CASHFLOW PREDICTION UI_AI
import ipywidgets as widgets
from IPython.display import display, clear_output
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Sample cashflow data
cashflow_data = pd.DataFrame(columns = ["Year","Month","Cash Inflow","Cash Outflow"])

# Widgets
year_input = widgets.Text(description = "Year:2025")
month_input = widgets.Text(description = "Month:Apr,May,Jun,July,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar")
cash_inflow_input = widgets.Text(description = "Cash Inflow:5000,4800,5100,5300,5500,6000,5800,6100,6200,5900,6500,7000")
cash_outflow_input = widgets.Text(description = "Cash Outflow:7000,6500,5900,6200,6100,5800,6000,5500,5300,5100,4800,5000")
add_button = widgets.Button(description = "Add Entry:")
button_style = "success"
predict_button = widgets.Button(description = "Predict cash flow 6 months ahead:")
button_style ="warning"
output = widgets.Output()

# Add Entry function
def add_entry(b):
  global cashflow_data
  new_entry = {"Year":year_input.value,"Month":month_input.value,"Cash Inflow":cash_inflow_input.value,"Cash Outflow":cash_outflow_input.value}
  cashflow_data = pd.concat([cashflow_data,pd.DataFrame([new_entry])],ignore_index = True)
  with output:
    clear_output()
    print("Entry added sucessfully")
    display(cashflow_data)

# Prediction function
def predict_cashflow(b):
  global cashflow_data
  if len(cashflow_data)<2:
    with output:
      clear_output()
      print("Enter atleast 6 months entries to predict")
      return

  # Prepare data
  cashflow_data["Net Cash Flow"] = cashflow_data["Cash Inflow"].astype(float) - cashflow_data["Cash Outflow"].astype(float)
  cashflow_data["Time"] = np.arange(len(cashflow_data)) #time index

  # Linear regression model
  model = LinearRegression()
  model.fit(cashflow_data[["Time"]],cashflow_data["Net Cash Flow"])

  # Predict for next 6 months
  future_time = np.arange(len(cashflow_data),len(cashflow_data)+6).reshape(-1,1)
  predicted_cashflow = model.predict(future_time)
  predicted_months = [f"Month{i+1}" for i in range(len(cashflow_data),len(cashflow_data)+6)]
  predicted_df = pd.DataFrame({"Month":predicted_months,"Predicted Net Cash Flow":predicted_cashflow})

  # PLOT
  with output:
    clear_output()
    print("Predicted Cash Flow for the next 6 months")
    plt.figure(figsize = (10,5))
    plt.plot(cashflow_data["Time"],cashflow_data["Net Cash Flow"],label = "Actual",marker = 'o')
    plt.plot(future_time,predicted_cashflow,label = "Predicted",linestyle = "--",marker='x')
    plt.xlabel("Time")
    plt.ylabel("Net Cash Flow")
    plt.title("Cash Flow Prediction")
    plt.legend()
    plt.grid(True)
    plt.show()
    display(predicted_df)

# Bind functions
add_button.on_click(add_entry)
predict_button.on_click(predict_cashflow)

# Layout
ui = widgets.VBox([widgets.HTML("<h3>Cash Flow Statement Prediction(UI based)<h3>"),year_input,month_input,cash_inflow_input,cash_outflow_input,
                   widgets.HBox([add_button,predict_button]),output])
display(ui)